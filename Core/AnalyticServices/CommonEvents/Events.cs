namespace Core.AnalyticServices.CommonEvents
{
    using System;
    using System.Collections.Generic;
    using Core.AnalyticServices.Data;

    /// <summary>
    /// Fully custom event class which can be used to send any data that falls outside the bounds
    /// of the standard taxonomy.
    /// </summary>
    [Serializable]
    public sealed class CustomEvent : IEvent
    {
        /// <summary>
        /// The name of your custom event.
        /// </summary>
        /// <remarks>
        /// Typically all event names are in `snake_case`
        /// </remarks>
        public string EventName;

        /// <summary>
        /// Any properties of your custom event.
        /// </summary>
        /// <remarks>
        /// Typically all event property keys are in `snake_case`
        /// </remarks>
        public Dictionary<string, object> EventProperties;
    }

    /*
    * GamePlay
    */

    #region Gameplay

    /// <summary>
    /// Default location change event class (screen in game).
    /// </summary>
    /// <remarks>
    /// Use this class to track location changes (screen in game).
    /// </remarks>
    [Serializable]
    internal class LocationChange : IEvent
    {
        /// <summary>
        /// Next (current) location (screen).
        /// </summary>
        public string LocationNext;

        /// <summary>
        /// Previous location (screen).
        /// </summary>
        public string LocationPrev;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationChange"/> class.
        /// </summary>
        /// <param name="locationNext">Next (current) location (screen).</param>
        /// <param name="locationPrev">Previous location (screen).</param>
        public LocationChange(string locationNext, string locationPrev)
        {
            this.LocationNext = locationNext;
            this.LocationPrev = locationPrev;
        }
    }
    #endregion

    /*
     * Purchasing
     */
    #region Purchasing
    /// <summary>
    /// Default purchase event class which contains properties common to all purchase events
    /// </summary>
    [Serializable]
    public class IapEvent : IEvent
    {
        /// <summary>
        /// When used alone this is a unique code from the app's store that determines what type
        /// of item or items were purchased.
        /// When combined with the OfferSku this is a unique code tied to the app's store which
        /// determines the price.
        /// </summary>
        public string PriceSku;

        /// <summary>
        /// A unique code tied to the type of item or items that were purchased by the user.
        /// </summary>
        /// <remarks>
        /// Optional
        /// </remarks>
        public string OfferSku;

        /// <summary>
        /// A unique code generated by this app's store that identifies a specific instance of a user purchase.
        /// </summary>
        public string TransactionId;
    }

    /// <summary>
    /// Event fired when an item purchase process starts.
    /// </summary>
    [Serializable]
    public sealed class IapTransactionWillStart : IapEvent
    {
    }

    /// <summary>
    ///  Event fired if app's store purchase fails or does not validate.
    /// </summary>
    [Serializable]
    public sealed class IapTransactionDidFail : IapEvent
    {
        /// <summary>
        /// Description of the error that occurred.
        /// </summary>
        public string ErrorMessage;
    }

    /// <summary>
    /// Event fired on the successful completion of a purchase via the app's store
    /// </summary>
    /// <remarks>
    /// Should not be tied to
    /// </remarks>
    [Serializable]
    public sealed class IapTransactionDidSucceed : IapEvent
    {
        /// <summary>
        /// Receipt provided by this application's purchasing provider
        /// </summary>
        public string Receipt;

        /// <summary>
        /// Identifier of the currency type used for the transaction in ISO 4217 format
        /// </summary>
        /// <remarks>
        /// https://www.iso.org/iso-4217-currency-codes.html
        /// </remarks>
        public string CurrencyCode;

        /// <summary>
        /// Product price to the user at time of transaction in value associated with the
        /// currency type described by CurrencyCode
        /// </summary>
        public double Price;

        /// <summary>
        /// Identify if it's a featured item
        /// </summary>
        public bool Featured;

        /// <summary>
        /// If the purchase was made against a sandbox environment
        /// </summary>
        public bool IsTest;
    }

    /// <summary>
    /// Event fired at the start of the receipt validation process.
    /// </summary>
    [Serializable]
    public sealed class IapWillValidate : IapEvent
    {
    }

    /// <summary>
    /// Event fired after a successful validation.
    /// </summary>
    [Serializable]
    public sealed class IapDidValidate : IapEvent
    {
        /// <summary>
        /// If the validated using a test Receipt.
        /// </summary>
        public bool IsTest;
    }

    /// <summary>
    /// Event fired when the validation process fails.
    /// </summary>
    [Serializable]
    public sealed class IapFailedValidate : IapEvent
    {
        /// <summary>
        /// If the validated using a test Receipt.
        /// </summary>
        public bool IsTest;

        /// <summary>
        /// Description of the error that occurred.
        /// </summary>
        public string ErrorMessage;
    }

    /// <summary>
    /// Event fired when a product gets consumed.
    /// </summary>
    [Serializable]
    public sealed class IapDidConsume : IapEvent
    {
    }

    /// <summary>
    /// Event fired when a transaction gets restored from cache.
    /// </summary>
    [Serializable]
    public sealed class IapDidRestore : IapEvent
    {
    }

    /// <summary>
    /// Event fired when a transaction fails to restore.
    /// </summary>
    [Serializable]
    public sealed class IapFailedRestore : IapEvent
    {
        public String ErrorMessage;
    }

    /// <summary>
    /// Event fired when the manual purchase restoration process for iOS starts.
    /// </summary>
    [Serializable]
    public sealed class IapRestorationProcessWillStart : IEvent
    {
    }

    /// <summary>
    /// Event fired when the manual purchase restoration process for iOS has succeded.
    /// It does not mean that actual purchases has been restored, only that the process has been successful.
    /// </summary>
    [Serializable]
    public sealed class IapRestorationProcessDidSucceed : IEvent
    {
    }

    /// <summary>
    /// Event fired when the manual purchase restoration process for iOS has failed.
    /// </summary>
    [Serializable]
    public sealed class IapRestorationProcessDidFail : IEvent
    {
    }
    #endregion

    /*
     * App Lifecycle
     */

    #region App Lifecycle

    /// <summary>
    /// An event automatically fired when Unity reports a focus in.
    /// todo - acquire reporting from native and not unity
    /// </summary>
    internal sealed class FocusIn : IEvent
    {
    }

    /// <summary>
    /// An event automatically fired when Unity reports a focus out.
    /// todo - acquire reporting from native and not unity
    /// </summary>
    internal sealed class FocusOut : IEvent
    {
    }

    /// <summary>
    /// An event automatically fired every 30 seconds (default)
    /// </summary>
    internal sealed class Heartbeat : IEvent
    {
    }

    /*
     * App Initialization
     */

    /// <summary>
    /// An event automatically fired by the SDK which reports that the app has launched. This
    /// event is fired before any identifiers can be attached.
    /// </summary>
    [Serializable]
    internal class GameLaunched : IEvent
    {
        /// <summary>
        /// 
        /// </summary>
        public string InstallId;

        /// <summary>
        /// 
        /// </summary>
        public bool FirstLaunch;
    }

    /// <summary>
    /// An event automatically fired by the SDK which reports that a session id has been created with
    /// identifiers ready to be sent.
    /// </summary>
    [Serializable]
    internal sealed class SessionStarted : GameLaunched
    {
    }
    #endregion


    /*
     * Service Status
     */

    #region Service Status

    /// <summary>
    /// Generic event for service initialization. Used for tracking purposes.
    /// </summary>
    [Serializable]
    public class ServiceStatus : IEvent
    {
        /// <summary>
        /// Name of the service
        /// </summary>
        public String ServiceName;
    }

    /// <summary>
    /// An event fired when a service is trying to get initialized.
    /// </summary>
    [Serializable]
    public sealed class ServiceWillInit : ServiceStatus
    {
    }

    /// <summary>
    /// An event fired when a service has initialized correctly.
    /// </summary>
    [Serializable]
    public sealed class ServiceDidInit : ServiceStatus
    {
    }

    /// <summary>
    /// An event fired when a service fails to initialize.
    /// </summary>
    [Serializable]
    public sealed class ServiceFailedInit : ServiceStatus
    {
        /// <summary>
        /// Error message if any.
        /// </summary>
        public String Error;
    }
    #endregion
}